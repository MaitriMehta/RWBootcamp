{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 ComicSansMS;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 Times-Bold;
\f3\fswiss\fcharset0 ArialMT;\f4\fswiss\fcharset0 Arial-ItalicMT;\f5\fswiss\fcharset0 Arial-BoldMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red16\green60\blue192;\red17\green83\blue142;
\red255\green255\blue255;\red34\green0\blue91;\red73\green17\blue135;\red47\green108\blue118;\red0\green0\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c6667\c33333\c80000;\cssrgb\c5882\c40784\c62745;
\cssrgb\c100000\c100000\c100000;\cssrgb\c18039\c5098\c43137;\cssrgb\c36078\c14902\c60000;\cssrgb\c23137\c49804\c53725;\cssrgb\c0\c4314\c100000;
}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl940\sa80\qc\partightenfactor0

\f0\fs69\fsmilli34667 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 iOS Bootcamp Homework Two
\f1\fs24 \
\pard\pardeftab720\sl720\sa160\partightenfactor0

\f0\fs53\fsmilli26667 \cf2 Part 1 - Programming in Swift: Fundamentals
\f2\b\fs48 \
\pard\pardeftab720\sl400\partightenfactor0

\f0\b0\fs29\fsmilli14667 \cf2 Complete watching the video series {\field{\*\fldinst{HYPERLINK "https://www.raywenderlich.com/5539282-programming-in-swift-fundamentals"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 Programming in Swift: Fundamentals}} and coding along with the tutorials. To practice what you learned, you\'e2\'80\'99ll refactor the BullsEye project to make it conform to the Model-View-Controller architecture. Write in Swift with UIKit.
\f1\fs24 \
\pard\pardeftab720\sl580\sa160\partightenfactor0

\f0\fs42\fsmilli21333 \cf2 MVC Model: BullsEyeGame
\f2\b\fs36 \
\pard\pardeftab720\sl400\partightenfactor0

\f3\b0\fs29\fsmilli14667 \cf2 To keep it simple, use the {\field{\*\fldinst{HYPERLINK "https://files.betamax.raywenderlich.com/attachments/videos/1927/20a3598d-8d8d-4044-ad39-5a1d58c62ad9.zip"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 final project}} from 
\f4\i Your First iOS App Part 4 Challenge: Starting Over
\f3\i0 . This has the bonus points calculation and implements Start Over but not the information page. The view controller contains both the game logic and the UI presentation code. It\'e2\'80\'99s on its way to becoming a Massive View Controller (the joke meaning of MVC). You can watch Paul Hegarty\'e2\'80\'99s classic explanation of {\field{\*\fldinst{HYPERLINK "https://www.youtube.com/watch?v=gI3pz7eFgfo"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 Model-View-Controller on YouTube}}.
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f3\fs29\fsmilli14667 \cf2 Your task is to move the game logic out of the view controller into a 
\f5\b BullsEyeGame
\f3\b0  type. Create a new Swift file (not Cocoa Touch). This file imports 
\f5\b Foundation
\f3\b0 , not UIKit. BullsEyeGame is your 
\f5\b UI-independent model
\f3\b0  type, so you should not write any UIKit code in it! It\'e2\'80\'99s up to you whether you use a struct or a class. You\'e2\'80\'99ll discuss this decision in your 
\f5\b README
\f3\b0  file.
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f3\fs29\fsmilli14667 \cf2 Carefully analyze the code currently in 
\f5\b ViewController
\f3\b0  to separate the game logic from the UI presentation. You could start by moving every 
\f5\b ViewController
\f3\b0  property that is a game value into your 
\f5\b BullsEyeGame
\f3\b0 , then comment out those properties in 
\f5\b ViewController
\f3\b0 . The error messages will show you where you should replace these properties with 
\f5\b BullsEyeGame
\f3\b0  properties. Then look at the helper methods in 
\f5\b ViewController
\f3\b0  and separate any code that interacts with a UI-anything.
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f3\fs29\fsmilli14667 \cf2 Refactor the code in 
\f5\b ViewController
\f3\b0  and in 
\f5\b BullsEyeGame
\f3\b0  into new or modified methods. For example, you might replace 
\f5\b updateLabels()
\f3\b0  with 
\f5\b updateView()
\f3\b0 , where you also update 
\f5\b slider.value
\f3\b0 .
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f3\fs29\fsmilli14667 \cf2 When you\'e2\'80\'99re finished, 
\f5\b ViewController
\f3\b0  will contain only code that creates a 
\f5\b BullsEyeGame
\f3\b0  object, then uses its properties and methods to present the game on the screen. The game itself will work exactly the same.
\f1\fs24 \
\pard\pardeftab720\sl400\sa160\partightenfactor0

\f2\b\fs36 \cf2 \
\pard\pardeftab720\sl580\sa160\partightenfactor0

\f0\b0\fs42\fsmilli21333 \cf2 A Treat: BullsEye Hint
\f2\b\fs36 \
\pard\pardeftab720\sl400\partightenfactor0

\f3\b0\fs29\fsmilli14667 \cf2 Many people find RGBullsEye almost addictive. I think it\'e2\'80\'99s because it provides immediate feedback, so you 
\f4\i think
\f3\i0  you can get a perfect score if only you try hard enough.
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f3\fs29\fsmilli14667 \cf2 As a treat, here\'e2\'80\'99s some code to add a hint to BullsEye. It sets the slider\'e2\'80\'99s minimum track tint color to blue with 
\f5\b alpha
\f3\b0  set to 
\f5\b difference/100
\f3\b0 . This means the minimum track tint color fades to white as the slider thumb gets closer to the correct position. I chose blue to suggest \'e2\'80\'9ccold\'e2\'80\uc0\u157 , as in the \'e2\'80\'9cyou\'e2\'80\'99re getting colder/warmer\'e2\'80\u157  hints you give someone when you\'e2\'80\'99ve hidden something they\'e2\'80\'99re searching for.
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f3\fs29\fsmilli14667 \cf2 Add this computed property at the top of 
\f5\b ViewController
\f3\b0 :
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f5\b\fs29\fsmilli14667 \cf4 \cb5 \strokec4 var
\f3\b0 \cf2 \strokec2  \cf4 \strokec4 quickDiff\cf2 \strokec2 : \cf6 \strokec6 Int\cf2 \strokec2  \{
\f1\fs24 \

\f3\fs29\fsmilli14667 \'c2\'a0\'c2\'a0
\f5\b return
\f3\b0  abs(game.targetValue - currentValue)
\f1\fs24 \

\f3\fs29\fsmilli14667 \}
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f3\fs29\fsmilli14667 \cf2 Then add this line to 
\f5\b viewDidLoad()
\f3\b0 , 
\f5\b updateView()
\f3\b0  and 
\f5\b sliderMoved(_:)
\f3\b0 :
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f3\fs29\fsmilli14667 \cf2 \cb5 slider.\cf7 \strokec7 minimumTrackTintColor\cf2 \strokec2  =\'c2\'a0\'c2\'a0\'c2\'a0
\f1\fs24 \

\f3\fs29\fsmilli14667 \cf6 \strokec6 \'c2\'a0\'c2\'a0\'c2\'a0UIColor\cf2 \strokec2 .\cf7 \strokec7 blue\cf2 \strokec2 .\cf7 \strokec7 withAlphaComponent\cf2 \strokec2 (\cf6 \strokec6 CGFloat\cf2 \strokec2 (\cf8 \strokec8 quickDiff\cf2 \strokec2 )\cf7 \strokec7 /\cf9 \strokec9 100.0\cf2 \strokec2 )
\f1\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\sl400\partightenfactor0

\f3\fs29\fsmilli14667 \cf2 Adjust this code if your property or function names are different.
\f1\fs24 \
}