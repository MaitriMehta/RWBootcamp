{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 ComicSansMS;\f1\froman\fcharset0 Times-Bold;\f2\fswiss\fcharset0 ArialMT;
\f3\fswiss\fcharset0 Arial-ItalicMT;\f4\froman\fcharset0 Times-Roman;\f5\fswiss\fcharset0 Arial-BoldMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red16\green60\blue192;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c6667\c33333\c80000;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl580\sa160\partightenfactor0

\f0\fs42\fsmilli21333 \cf2 \expnd0\expndtw0\kerning0
MVC Model: BullsEyeGame
\f1\b\fs36 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\b0\fs29\fsmilli14667 \cf2 To keep it simple, use the {\field{\*\fldinst{HYPERLINK "https://files.betamax.raywenderlich.com/attachments/videos/1927/20a3598d-8d8d-4044-ad39-5a1d58c62ad9.zip"}}{\fldrslt \cf3 \ul \ulc3 final project}} from 
\f3\i Your First iOS App Part 4 Challenge: Starting Over
\f2\i0 . This has the bonus points calculation and implements Start Over but not the information page. The view controller contains both the game logic and the UI presentation code. It\'92s on its way to becoming a Massive View Controller (the joke meaning of MVC). You can watch Paul Hegarty\'92s classic explanation of {\field{\*\fldinst{HYPERLINK "https://www.youtube.com/watch?v=gI3pz7eFgfo"}}{\fldrslt \cf3 \ul \ulc3 Model-View-Controller on YouTube}}.
\f4\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs29\fsmilli14667 \cf2 Your task is to move the game logic out of the view controller into a 
\f5\b BullsEyeGame
\f2\b0  type. Create a new Swift file (not Cocoa Touch). This file imports 
\f5\b Foundation
\f2\b0 , not UIKit. BullsEyeGame is your 
\f5\b UI-independent model
\f2\b0  type, so you should not write any UIKit code in it! It\'92s up to you whether you use a struct or a class. You\'92ll discuss this decision in your 
\f5\b README
\f2\b0  file.
\f4\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs29\fsmilli14667 \cf2 Carefully analyze the code currently in 
\f5\b ViewController
\f2\b0  to separate the game logic from the UI presentation. Refactor the code in 
\f5\b ViewController
\f2\b0  and in 
\f5\b BullsEyeGame
\f2\b0  into new or modified methods. For example, you might replace 
\f5\b updateLabels()
\f2\b0  with 
\f5\b updateView()
\f2\b0 , where you also update 
\f5\b slider.value
\f2\b0 .
\f4\fs24 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs29\fsmilli14667 \cf2 When you\'92re finished, 
\f5\b ViewController
\f2\b0  will contain only code that creates a 
\f5\b BullsEyeGame
\f2\b0  object, then uses its properties and methods to present the game on the screen. The game itself will work exactly the same.
\f4\fs24 \
}